import io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository
import org.springframework.boot.gradle.tasks.bundling.BootJar

buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://repo.grails.org/grails/core' }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath 'io.github.gradle-nexus:publish-plugin:1.3.0'
    }
}

group = 'org.grails.plugins'
version = projectVersion

apply plugin: 'groovy'
apply plugin: 'java-library'
apply plugin: 'org.grails.grails-plugin'
apply plugin: 'io.github.gradle-nexus.publish-plugin'
apply plugin: 'maven-publish'
apply plugin: 'signing'

repositories {
    mavenCentral()
    maven { url = 'https://repo.grails.org/grails/core' }
}

configurations {
    documentation
}

// FORCE UPGRADE OF GROOVY IN DEPENDENCIES TO GROOVY 4
configurations.configureEach {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.codehaus.groovy') {
            details.useTarget(group: 'org.apache.groovy', name: details.requested.name, version: groovyVersion)
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

dependencies {

    api 'org.grails:grails-web-common'

    implementation "org.apache.commons:commons-lang3:$commonsLang3Version"
    implementation "org.codehaus.groovy:groovy-xml:$groovyVersion"
    implementation 'org.grails:grails-bootstrap'
    implementation "org.grails:grails-datastore-gorm:$datastoreVersion"

    compileOnly "jakarta.servlet:jakarta.servlet-api:$servletApiVersion" // Provided

    testImplementation "jakarta.servlet:jakarta.servlet-api:$servletApiVersion"
    testImplementation 'org.grails:grails-core'
    testImplementation 'org.grails:grails-datastore-core'
    testImplementation 'org.grails:grails-web-common'
    testImplementation "org.springframework:spring-context:$springVersion"
    testImplementation "org.spockframework:spock-core:$spockVersion"

    documentation 'com.github.javaparser:javaparser-core:3.26.1'
}

tasks.named('groovydoc', Groovydoc) {
    classpath += configurations.documentation
}

tasks.named('bootJar', BootJar) {
    enabled = false
    mainClass = 'grails.plugin.converters.Application'
}

tasks.named('jar', Jar) {
    enabled = true
    archiveClassifier = ''
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging { events 'passed', 'skipped', 'failed', 'standardOut', 'standardError' }
}

ext.set('signing.keyId', System.getenv('SIGNING_KEY'))
ext.set('signing.password', System.getenv('SIGNING_PASSPHRASE'))
ext.set('isSnapshot', projectVersion.endsWith('-SNAPSHOT'))
ext.set('isReleaseVersion', !isSnapshot)


def javaComponent = components.named('java')
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from javaComponent.get()
            versionMapping {
                usage('java-api') { fromResolutionOf('runtimeClasspath') }
                usage('java-runtime') { fromResolutionResult() }
            }
            pom {
                name = 'Grails Converters Plugin'
                description = 'Provides JSON and XML converters'
                url = 'https://github.com/grails-plugins/grails-plugin-converters'
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/grails-plugins/grails-plugin-converters.git'
                    developerConnection = 'scm:git:ssh://github.com/grails-plugins/grails-plugin-converters.git'
                    url = 'https://github.com/grails-plugins/grails-plugin-converters'
                }
                developers {
                    developer {
                        id = 'graemerocher'
                        name = 'Graeme Rocher'
                    }
                }
            }
            // dependency management shouldn't be included
            pom.withXml {
                def root = it.asElement()
                root.getElementsByTagName('dependencyManagement').each { root.removeChild(it) }
            }
        }
    }

    if (isSnapshot) {
        repositories {
            maven {
                credentials {
                    username = project.findProperty('artifactoryUsername') ?: ''
                    password = project.findProperty('artifactoryPassword') ?: ''
                }
                url = uri('https://repo.grails.org/grails/plugins3-snapshots-local')
            }
        }
    }
}

def mavenPublication = publishing.publications.named('mavenJava')
afterEvaluate {
    signing {
        required = { isReleaseVersion }
        sign mavenPublication.get()
    }
}

//do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(InitializeNexusStagingRepository).configureEach {
    shouldRunAfter = tasks.withType(Sign)
}

if (isReleaseVersion && project.hasProperty('release')) {
    nexusPublishing {
        String sonatypeUsername = project.findProperty('sonatypeOssUsername') ?: ''
        String sonatypePassword = project.findProperty('sonatypeOssPassword') ?: ''
        String sonatypeStagingProfileId = project.findProperty('sonatypeOssStagingProfileId') ?: ''
        String sonatypeOssRepository = project.findProperty('sonatypeOssRepo') ?: ''
        repositories {
            sonatype {
                nexusUrl = uri(sonatypeOssRepository)
                username = sonatypeUsername
                password = sonatypePassword
                stagingProfileId = sonatypeStagingProfileId
            }
        }
    }
}